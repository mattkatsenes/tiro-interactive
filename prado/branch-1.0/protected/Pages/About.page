<%@ MasterClass="Layout" %>

<!-- The Main portion of the page. -->
<com:TContent ID="guts" >

<div class="info-box">About the Author: Matthew Katsenes is an MAT student in Latin and Classical Humanities at UMass Amherst.  His undergraduate work was done at Monmouth College, followed by graduate study in Mathematics at the University of Iowa.  A technophile through-and-through, he aims to make the integration of technology into the Latin classroom more practical and fun with this tool.</div>

<div class="title2">The Need</div>
<p>In May 2007, I found myself swamped with two major projects that entailed the same kind of work.  My professors wanted me to create primary texts annotated for student use: one from Virgil, and one from the Medieval Bestiary.  In each case, I needed to arrange text, glossary, and annotations in a form that students could read with hopeful fluency.</p>
<div class="title2">Current Tools</div>
<p>For these projects, I did not need to reinvent the wheel.  We have computers with word processing software.  Unfortunately, this software is not precisely designed to create gorgeous annotated texts.  I and my colleagues fought with Microsoft Word until we finally beat it into submission.  There were complicated tables and lists, and heaven help the poor Latin student who tried to open their highly tailored document on a different computer for printout.</p>
<div class="title2">A New Solution</div>
<p>After consideration, and trying out various word processors (the best I found was Apple's Pages), I decided that I would not deal with this hassle again.  I decided to create a text annotation system specifically designed for Latin teachers and students to create readable texts for student use.  And so, Tiro was born.  Named after Cicero's famous scribe, this program comes in two parts:</p>
<div class="title2">Text Creation and Editing</div>
<p>To begin the process, the editor must input a text to work on.  There are various methods in the works, but more on that later.  Once the computer has a text, the editor can choose terms to define and use automatically generated definitions or enter their own.  The editor can also append free-form notes on any subject.  Such notes will be anchored to points in the text (lines of poetry or sections of prose).</p>
<div class="title2">Text Display and Dissemination</div>
<p>Once the text is in the machine in it's annotated form, there are a myriad of output options available.  The editor can choose to create a PDF or Word Document beautifully formatted like Clyde Pharr's Aeneid.  Alternatively, the text can appear in the form commonly employed by readers such as Fabulae Graecae or the Carpe Diem Horace reader.</p>
<p>Because this text is generated by a computer program, though, the options expand well beyond the realm of traditional classics texts.  Just as easily, the editor can turn a text into an interactive online experience.  Definitions appear as words are clicked, users can take notes and type translations alongside, or even interlinearly.The Details</p>
<div class="title2">Deployment</div>
<p>Given the strengths & weaknesses of my own programming abilities as well as a fervent desire that this project be platform-independent, I have decided to deploy it as a web application.  This means that anyone wishing to use the program need simply type in a web address to their browser and start editing.  Pursuant to that, I've purchased the domain name www.tiro-interactive.org.  It is now the repository for this application.  It is running on my iBook G4 plugged in the the UMass network in my Hampshire House office.</p>
<div class="title2">The Server</div>
<p>My iBook is running Fedora Core 7 Linux with an Apache Web Server (2.2.4).  This server is set up to support Java Servlets via Apache Tomcat (5.5) which runs seamlessly.  To facilitate organized code development, I am using Subversion which is also integrated with the web server.</p>
<div class="title2">The Guts</div>
<p>There are several technologies and languages at the heart of this project.  The core frameworks are PHP, Javascript, and Apache Cocoon.</p>
<div class="title2">PHP</div>
<p>The bulk of the actual code to run Tiro is written in PHP.  This is a web scripting language where all of the processing is done by the server.  Since all the processing is done server-side, the resulting application will be completely platform independent.  Anyone with a web browser and internet connection will be able to use it.</p>
<div class="title2">Javascript</div>
<p>Javascript, unlike PHP, is a client-side technology.  The internet page sends the program code as text and it is executed by the client's web browser.  This makes it quite tricky because the code must work on Windows, Mac, and Linux machines running Firefox, Safari, or Internet Explorer.  Needless to say, great care is being taken with the javascript used in this project.  Most of the Javascript code sits on the output side and is used to create interesting special effects for viewing a text.</p>
<p>The particular type of javascript used most in Tiro, is called AJAX, Asynchronous Javascript And XML.  This "asynchronous" framework allows the designer to change elements of the web page without forcing the user to reload the page.</p>
<div class="title2">Apache Cocoon</div>
<p>Apache Cocoon is a web framework written in Java (different from Javascript) by the Apache Software Foundation.  It runs as a Servlet through Tomcat.  Basically, Cocoon allows me to take the text edited by our user (which is stored as XML) and return it to them in a beautiful form.  Currently I am struggling to get Cocoon to run on my server, so temporarily I am using a friend's server.  A prototype of one form of output (still in heavy development) can be found at http://caltuslex.hopto.org:8888/output/tei-ajax-testform(1).</p>
<div class="title2">XML</div>
<p>The eXtensible Markup Language (XML) is a highly customizable text storage format.  The HyperText Markup Language (HTML), the language in which all web pages are written, is a subset (or dialect) of XML.  One very successful implementation of XML standards has been created by the Text Encoding Initiative (TEI).  They have created a set of standards to for encoding scholarly texts.  This format is widely popular in the digital-classical world.  The Perseus Project at Tufts University uses it, and apparently the Etruscan Text Project based here at UMass is also adopting TEI standards.</p>
<p>Since it is such a widely used standard, Tiro will store its marked-up texts in this format as well.  A second advantage is that with some work, it should be possible to import texts directly from Perseus with merely a canonical reference.</p>

</com:TContent >